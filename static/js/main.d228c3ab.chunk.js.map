{"version":3,"sources":["features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/theme.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","App.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","reportWebVitals.js","index.js"],"names":["StyledForm","styled","form","theme","breakpoint","StyledInput","input","StyledButton","button","buttonMainColor","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","taskContent","payload","push","toggleHideDone","state","toggleTaskDone","taskID","index","findIndex","task","id","done","removeTask","splice","setAllDone","fetchExampleTasks","setTasks","actions","selectTasksState","selectTasks","selectHideDone","Form","inputRef","useRef","useState","newTaskContent","setNewTaskContent","dispatch","useDispatch","onSubmit","event","preventDefault","trim","content","nanoid","current","focus","ref","placeholder","value","onChange","target","required","StyledTasks","ul","StyledItem","li","hidden","css","StyledSpan","span","remove","TaskList","useSelector","map","onClick","StyledButtons","div","StyledButtonsButton","Buttons","length","disabled","every","StyledSection","section","StyledSectionHeader","header","Section","title","body","extraHeaderContent","StyledHeader","Header","StyledContainer","main","Container","children","Tasks","App","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","watchFetchExampleTasks","delay","call","exampleTasks","put","alert","takeLatest","type","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d228c3ab.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n    display: flex;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint}px){\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const StyledInput = styled.input`\r\n    flex-grow: 1;\r\n    margin-right: 20px;\r\n    padding: 10px;\r\n    border: 1px solid #ccc;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint}px){\r\n        margin: 0 0 10px;\r\n    }\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n    flex-shrink: 0;\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.buttonMainColor};\r\n    color: #fff;\r\n    border: none;\r\n    transition: background-color 0.3s, transform 0.3s;\r\n\r\n    &:hover{\r\n        cursor: pointer;\r\n        background-color: hsl(180, 100%, 30%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active{\r\n        outline: 2px solid #000;\r\n    }\r\n`;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: taskContent }) => {\r\n            tasks.push(taskContent);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskID }) => {\r\n            const index = tasks.findIndex(task => task.id === taskID);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskID }) => {\r\n            const index = tasks.findIndex(task => task.id === taskID);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    setTasks,\r\n} = tasksSlice.actions;\r\nexport const selectTasksState = state => state.tasks;\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport default tasksSlice.reducer;","import { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { StyledForm, StyledInput, StyledButton } from \"./styled\";\r\nimport { addTask } from \"../tasksSlice\";\r\n\r\nconst Form = () => {\r\n    const inputRef = useRef(null);\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (!newTaskContent.trim()) {\r\n            setNewTaskContent(\"\");\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: newTaskContent.trim(),\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    }\r\n\r\n    return (\r\n        <StyledForm\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <StyledInput\r\n                ref={inputRef}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                required\r\n            />\r\n            <StyledButton>Dodaj zadanie</StyledButton>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledTasks = styled.ul`\r\n    list-style-type: none;\r\n    margin: 0 auto;\r\n    padding: 40px 10px 20px;\r\n`;\r\n\r\nexport const StyledItem = styled.li`\r\n    padding: 10px 20px;\r\n    display: grid;\r\n    grid-gap: 10px;\r\n    grid-template-columns: auto 1fr auto;\r\n    align-items: center;\r\n    border-bottom: 2px solid #ddd;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const StyledSpan = styled.span`\r\n    color: #333;\r\n    word-break: break-word;\r\n    padding: 0 5px;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n    display: flex;\r\n    padding: 5px;\r\n    width: 30px;\r\n    height: 30px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border: none;\r\n    transition: background-color 0.3s;\r\n\r\n    ${({ done }) => done && css`\r\n        background-color: #090;\r\n        color: #fff;\r\n\r\n        &:hover{\r\n            background-color: #0a0;\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: #f00;\r\n        color: #fff;\r\n\r\n        &:hover{\r\n            background-color: #f60;\r\n        }\r\n    `}\r\n\r\n    &:hover{\r\n        cursor: pointer;\r\n    }\r\n\r\n    &:active{\r\n        outline: 2px solid #000;\r\n    }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { toggleTaskDone, removeTask, selectTasks, selectHideDone } from \"../tasksSlice\";\r\nimport { StyledTasks, StyledItem, StyledSpan, StyledButton } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n    const tasks = useSelector(selectTasks);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <StyledTasks>\r\n            {tasks.map(task => (\r\n                <StyledItem hidden={hideDone && task.done}\r\n                    key={task.id}\r\n                >\r\n                    <StyledButton done\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✔\" : \"\"}\r\n                    </StyledButton>\r\n                    <StyledSpan done={task.done}>\r\n                        {task.content}\r\n                    </StyledSpan>\r\n                    <StyledButton remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        🗑\r\n                    </StyledButton>\r\n                </StyledItem>\r\n            ))}\r\n        </StyledTasks>\r\n    )\r\n};\r\n\r\nexport default TaskList;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledButtons = styled.div`\r\n    display: flex;\r\n    list-style-type: none;\r\n    padding: 0; \r\n\r\n    @media(max-width:${({ theme }) => theme.breakpoint}px){\r\n        flex-direction: column;\r\n        align-items: center;\r\n    }\r\n`;\r\n\r\nexport const StyledButtonsButton = styled.button`\r\n    padding-left: 20px;\r\n    background-color: transparent;\r\n    border: none;\r\n    color: ${({ theme }) => theme.buttonMainColor};\r\n    transition: color 0.3s;\r\n\r\n    @media(max-width:${({ theme }) => theme.breakpoint}px){\r\n        padding-left: 0;\r\n        padding-bottom: 15px;\r\n    }\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n\r\n    &:hover{\r\n        color: hsl(180, 100%, 35%);\r\n        cursor: pointer;\r\n    }\r\n\r\n    &:active{\r\n        color: hsl(180, 100%, 20%);\r\n    }\r\n\r\n    &:disabled{\r\n        color: #999;\r\n        cursor: default;\r\n    }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { StyledButtons, StyledButtonsButton } from \"./styled\";\r\nimport { selectTasks, selectHideDone, toggleHideDone, setAllDone } from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const tasks = useSelector(selectTasks);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <>\r\n            {tasks.length > 0 && (\r\n                <StyledButtons>\r\n                    <StyledButtonsButton\r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                    >\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </StyledButtonsButton>\r\n                    <StyledButtonsButton\r\n                        disabled={tasks.every(({ done }) => done)}\r\n                        onClick={() => dispatch(setAllDone())}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </StyledButtonsButton>\r\n                </StyledButtons>)}\r\n        </>)\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: #fff;\r\n    margin: 30px;\r\n    padding: 0;\r\n    box-shadow: 0px 0px 2px 2px #ddd;\r\n`;\r\n\r\nexport const StyledSectionHeader = styled.header`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border-bottom: 2px solid #ddd;\r\n    padding: 0 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint}px){\r\n        flex-direction: column;\r\n    }\r\n`;","export const theme = {\r\n    breakpoint: 767,\r\n    buttonMainColor: \"teal\",\r\n};","import { StyledSection, StyledSectionHeader } from \"./styled\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { theme } from \"../theme\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <ThemeProvider theme={theme}>\r\n        <StyledSection>\r\n            <StyledSectionHeader>\r\n                <h2>{title}</h2>\r\n                {extraHeaderContent}\r\n            </StyledSectionHeader>\r\n            {body}\r\n        </StyledSection>\r\n    </ThemeProvider>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.header`\r\n    margin: 40px 30px 0;\r\n`;","import { StyledHeader } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n    <StyledHeader>\r\n        <h1>{title}</h1>\r\n    </StyledHeader>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n    margin: 0 auto;\r\n    width: 100%;\r\n    max-width: 1024px;\r\n`;","import { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n);\r\n\r\nexport default Container;","import Form from './Form';\nimport TaskList from './TaskList';\nimport Buttons from './Buttons';\nimport Section from '../../common/Section';\nimport Header from \"../../common/Header\";\nimport Container from \"../../common/Container\";\nimport { theme } from '../../common/theme.js';\nimport { ThemeProvider } from 'styled-components';\nimport { StyledButtonsButton } from './Buttons/styled';\nimport { useDispatch } from 'react-redux';\nimport { fetchExampleTasks } from './tasksSlice';\n\nfunction Tasks() {\n  const dispatch = useDispatch();\n  return (\n    <ThemeProvider theme={theme}>\n      <Container>\n        <Header title=\"Lista Zadań\" />\n        <Section\n          title=\"Dodaj nowe zadanie\"\n          body={<Form />}\n          extraHeaderContent={\n            <StyledButtonsButton\n              onClick={() => dispatch(fetchExampleTasks())}\n            >\n              Pobierz przykładowe zadania\n            </StyledButtonsButton>}\n        />\n        <Section title=\"Lista zadań\"\n          body={<TaskList />}\n          extraHeaderContent={<Buttons />}\n        />\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default Tasks;\n","import Tasks from \"./features/tasks/Tasks.js\";\r\n\r\nexport const App = () => <Tasks />;","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todo-list-redux/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { call, put, delay, takeLatest } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { fetchExampleTasks, setTasks } from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks));\r\n    } catch (error) {\r\n        yield call(alert, \"Coś poszło nie tak!\");\r\n    }\r\n}\r\nexport function* watchFetchExampleTasks() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n}","import { all } from \"redux-saga/effects\";\r\nimport { watchFetchExampleTasks } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        watchFetchExampleTasks(),\r\n    ]);\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport { App } from \"./App\";\nimport store from \"./store\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}