{"version":3,"sources":["features/tasks/TasksPage/Form/styled.js","features/tasks/Input/index.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TaskCommonButton/index.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/Search/queryParameters.js","features/tasks/TasksPage/index.js","common/StyledParagraph.js","features/author/AuthorPage.js","features/tasks/TaskPage/index.js","styled.js","theme.js","App.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","reportWebVitals.js","index.js"],"names":["StyledForm","styled","form","theme","breakpoint","StyledButton","button","buttonMainColor","StyledInput","input","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","loading","reducers","addTask","taskContent","payload","push","toggleHideDone","state","toggleTaskDone","taskID","index","findIndex","task","id","done","removeTask","splice","setAllDone","fetchExampleTasks","fetchExampleTasksSuccess","actions","selectTasksState","selectTasks","selectHideDone","selectLoading","Form","inputRef","useRef","useState","newTaskContent","setNewTaskContent","dispatch","useDispatch","onSubmit","event","preventDefault","trim","content","nanoid","current","focus","ref","placeholder","value","onChange","target","required","StyledTasks","ul","StyledItem","li","hidden","css","StyledSpan","span","remove","TaskCommonButton","TaskInfoLink","TaskList","location","useLocation","query","URLSearchParams","search","get","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","as","Link","to","StyledButtons","div","Buttons","length","disabled","every","StyledSection","section","StyledSectionHeader","header","Section","title","body","extraHeaderContent","StyledHeader","Header","StyledContainer","main","Container","children","Wrapper","searchQueryParamName","Search","replaceQueryParameter","history","useHistory","key","searchParams","delete","set","pathname","toString","useReplaceQueryParameter","useQueryParameter","TasksPage","StyledParagraph","p","AuthorPage","TaskPage","useParams","find","selectTaskById","activeClassName","StyledNavLink","NavLink","attrs","StyledNavigation","nav","App","path","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfc2bcf4.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n    display: flex;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint}px){\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n    flex-shrink: 0;\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.buttonMainColor};\r\n    color: #fff;\r\n    border: none;\r\n    transition: background-color 0.3s, transform 0.3s;\r\n\r\n    &:hover{\r\n        cursor: pointer;\r\n        background-color: hsl(180, 100%, 30%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active{\r\n        outline: 2px solid #000;\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledInput = styled.input`\r\n    flex-grow: 1;\r\n    margin-right: 20px;\r\n    padding: 10px;\r\n    border: 1px solid #ccc;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint}px){\r\n        margin: 0 0 10px;\r\n    }\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"../tasks/tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n        loading: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: taskContent }) => {\r\n            tasks.push(taskContent);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskID }) => {\r\n            const index = tasks.findIndex(task => task.id === taskID);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskID }) => {\r\n            const index = tasks.findIndex(task => task.id === taskID);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n        fetchExampleTasks: state => {\r\n            state.loading = true;\r\n        },\r\n        fetchExampleTasksSuccess: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n            state.loading = false;\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    fetchExampleTasksSuccess,\r\n} = tasksSlice.actions;\r\nexport const selectTasksState = state => state.tasks;\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\n\r\nexport const selectTaskById = (state, taskID) => selectTasks(state).find(({ id }) => id === taskID);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n    if (!query || query.trim === \"\") {\r\n        return tasks;\r\n    }\r\n\r\n    return selectTasks(state).filter(({ content }) =>\r\n        content.toUpperCase().includes(query.trim().toUpperCase()));\r\n}\r\n\r\nexport const selectLoading = state => selectTasksState(state).loading;\r\nexport default tasksSlice.reducer;","import { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { StyledForm, StyledButton } from \"./styled\";\r\nimport { StyledInput } from \"../../Input\";\r\nimport { addTask } from \"../../tasksSlice\";\r\n\r\nconst Form = () => {\r\n    const inputRef = useRef(null);\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (!newTaskContent.trim()) {\r\n            setNewTaskContent(\"\");\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: newTaskContent.trim(),\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    }\r\n\r\n    return (\r\n        <StyledForm\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <StyledInput\r\n                ref={inputRef}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                required\r\n            />\r\n            <StyledButton>Dodaj zadanie</StyledButton>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledTasks = styled.ul`\r\n    list-style-type: none;\r\n    margin: 0 auto;\r\n    padding: 40px 10px 20px;\r\n`;\r\n\r\nexport const StyledItem = styled.li`\r\n    padding: 10px 20px;\r\n    display: grid;\r\n    grid-gap: 10px;\r\n    grid-template-columns: auto 1fr auto;\r\n    align-items: center;\r\n    border-bottom: 2px solid #ddd;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const StyledSpan = styled.span`\r\n    color: #333;\r\n    word-break: break-word;\r\n    padding: 0 5px;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n    display: flex;\r\n    padding: 5px;\r\n    width: 30px;\r\n    height: 30px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border: none;\r\n    transition: background-color 0.3s;\r\n\r\n    ${({ done }) => done && css`\r\n        background-color: #090;\r\n        color: #fff;\r\n\r\n        &:hover{\r\n            background-color: #0a0;\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: #f00;\r\n        color: #fff;\r\n\r\n        &:hover{\r\n            background-color: #f60;\r\n        }\r\n    `}\r\n\r\n    &:hover{\r\n        cursor: pointer;\r\n    }\r\n\r\n    &:active{\r\n        outline: 2px solid #000;\r\n    }\r\n`;","import styled, { css } from \"styled-components\";\r\n\r\nexport const TaskCommonButton = styled.button`\r\n    padding-left: 20px;\r\n    background-color: transparent;\r\n    border: none;\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.buttonMainColor};\r\n    transition: color 0.3s;\r\n\r\n    @media(max-width:${({ theme }) => theme.breakpoint}px){\r\n        padding-left: 0;\r\n        padding-bottom: 15px;\r\n    }\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n\r\n    &:hover{\r\n        color: hsl(180, 100%, 35%);\r\n        cursor: pointer;\r\n    }\r\n\r\n    &:active{\r\n        color: hsl(180, 100%, 20%);\r\n    }\r\n\r\n    &:disabled{\r\n        color: #999;\r\n        cursor: default;\r\n    }\r\n`;\r\n\r\nexport const TaskInfoLink = styled(TaskCommonButton)`\r\n    padding: 0;\r\n    text-decoration: none;\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasksByQuery } from \"../../tasksSlice\";\r\nimport { StyledTasks, StyledItem, StyledSpan, StyledButton } from \"./styled\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { TaskInfoLink } from \"../../TaskCommonButton\";\r\n\r\nconst TaskList = () => {\r\n    const location = useLocation();\r\n    const query = new URLSearchParams(location.search).get(\"szukaj\");\r\n\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <StyledTasks>\r\n            {tasks.map(task => (\r\n                <StyledItem hidden={hideDone && task.done}\r\n                    key={task.id}\r\n                >\r\n                    <StyledButton done\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✔\" : \"\"}\r\n                    </StyledButton>\r\n                    <StyledSpan done={task.done}>\r\n                        <TaskInfoLink as={Link} to={`/zadania/${task.id}`}>{task.content}</TaskInfoLink>\r\n                    </StyledSpan>\r\n                    <StyledButton remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        🗑\r\n                    </StyledButton>\r\n                </StyledItem>\r\n            ))}\r\n        </StyledTasks>\r\n    )\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const StyledButtons = styled.div`\r\n    display: flex;\r\n    list-style-type: none;\r\n    padding: 0; \r\n\r\n    @media(max-width:${({ theme }) => theme.breakpoint}px){\r\n        flex-direction: column;\r\n        align-items: center;\r\n    }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { StyledButtons } from \"./styled\";\r\nimport { selectTasks, selectHideDone, toggleHideDone, setAllDone } from \"../../tasksSlice\";\r\nimport { TaskCommonButton } from \"../../TaskCommonButton\";\r\n\r\nconst Buttons = () => {\r\n    const tasks = useSelector(selectTasks);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <>\r\n            {tasks.length > 0 && (\r\n                <StyledButtons>\r\n                    <TaskCommonButton\r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                    >\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </TaskCommonButton>\r\n                    <TaskCommonButton\r\n                        disabled={tasks.every(({ done }) => done)}\r\n                        onClick={() => dispatch(setAllDone())}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </TaskCommonButton>\r\n                </StyledButtons>)}\r\n        </>)\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: #fff;\r\n    margin: 30px;\r\n    padding: 0;\r\n    box-shadow: 0px 0px 2px 2px #ddd;\r\n`;\r\n\r\nexport const StyledSectionHeader = styled.header`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border-bottom: 2px solid #ddd;\r\n    padding: 0 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint}px){\r\n        flex-direction: column;\r\n    }\r\n`;","import { StyledSection, StyledSectionHeader } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <StyledSection>\r\n        <StyledSectionHeader>\r\n            <h2>{title}</h2>\r\n            {extraHeaderContent}\r\n        </StyledSectionHeader>\r\n        {body}\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.header`\r\n    margin: 40px 30px 0;\r\n`;","import { StyledHeader } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n    <StyledHeader>\r\n        <h1>{title}</h1>\r\n    </StyledHeader>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n    margin: 0 auto;\r\n    width: 100%;\r\n    max-width: 1024px;\r\n`;","import { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    padding: 20px;\r\n    padding-right: 0;\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint}px)\r\n    {\r\n        padding-right: 20px;\r\n    }\r\n`;","export const searchQueryParamName = \"szukaj\";","import { StyledInput } from \"../../../tasks/Input/index\";\r\nimport { Wrapper } from \"./styled\";\r\nimport { searchQueryParamName } from \"../searchQueryParamName\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"./queryParameters\";\r\n\r\nexport const Search = () => {\r\n    const replaceQueryParameter = useReplaceQueryParameter();\r\n    const query = useQueryParameter(searchQueryParamName);\r\n\r\n    const onInputChange = ({ target }) => {\r\n        replaceQueryParameter({\r\n            key: searchQueryParamName,\r\n            value: target.value.trim() !== \"\" ? target.value : \"\",\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <StyledInput\r\n                placeholder=\"Filtruj zadania\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    );\r\n};","import { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = searchQueryParamName => {\r\n    const location = useLocation();\r\n    return (new URLSearchParams(location.search)).get(searchQueryParamName);\r\n};\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const replaceQueryParameter = ({ key, value }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n        if (value === \"\") {\r\n            searchParams.delete(key);\r\n        }\r\n        else {\r\n            searchParams.set(key, value);\r\n        }\r\n\r\n        history.push(`${location.pathname}?${searchParams.toString()}`);\r\n    }\r\n    return replaceQueryParameter;\r\n}","import Form from './Form';\r\nimport TaskList from './TaskList';\r\nimport Buttons from './Buttons';\r\nimport Section from '../../../common/Section';\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { Search } from './Search';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchExampleTasks, selectLoading } from '../tasksSlice';\r\nimport { TaskCommonButton } from '../TaskCommonButton';\r\n\r\nfunction TasksPage() {\r\n\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(selectLoading);\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista Zadań\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form />}\r\n        extraHeaderContent={\r\n          <TaskCommonButton\r\n            disabled={loading}\r\n            onClick={\r\n              () => {\r\n                dispatch(fetchExampleTasks());\r\n              }\r\n            }\r\n          >\r\n            {!loading ? \"Pobierz przykładowe zadania\" : \"Ładowanie...\"}\r\n          </TaskCommonButton>}\r\n      />\r\n      <Section\r\n        title=\"Wyszukiwarka\"\r\n        body={<Search />}\r\n      />\r\n      <Section title=\"Lista zadań\"\r\n        body={<TaskList />}\r\n        extraHeaderContent={<Buttons />}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TasksPage;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledParagraph = styled.p`\r\n    padding: 0 20px 10px;\r\n`;","import Section from '../../common/Section';\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\nimport { StyledParagraph } from \"../../common/StyledParagraph\";\r\n\r\nfunction AuthorPage() {\r\n\r\n    return (\r\n        <Container>\r\n            <Header title=\"O autorze\" />\r\n            <Section\r\n                title=\"Paweł Suchy\"\r\n                body={\r\n                    <>\r\n                        <StyledParagraph>\r\n                            Nazywam się <strong>Paweł Suchy</strong>, mam 26 lat, mieszkam w\r\n                            Międzyrzeczu\r\n                            Dolnym koło Bielska-Białej.\r\n                        </StyledParagraph>\r\n                        <StyledParagraph>\r\n                            Ukończyłem technikum informatyczne w Zespole Szkół \"Silesia\" w\r\n                            Czechowicach-Dziedzicach jednak póki co nie pracuję w zawodzie.\r\n                        </StyledParagraph>\r\n                        <StyledParagraph>\r\n                            Aktualnie pracuję na produkcji w branży Automotive jednak bardzo mocno\r\n                            wierzę w to,\r\n                            że po ukończeniu tego kursu uda mi się, jeśli nie zmienić pracę na stałe, to chociaż zacząć dorabiać\r\n                            na frontendzie.\r\n                        </StyledParagraph>\r\n                        <StyledParagraph>\r\n                            Poza pracą od prawie 13 lat gram na puzonie a od prawie 12 w Młodzieżowej\r\n                            Orkiestrze Dętej Miejskiego Domu Kultury w Czechowicach-Dziedzicach. Poza tą orkiestrą miałem\r\n                            również okazję wziąć udział w czterech edycjach Żywieckiego Suwakowania a także zagrać dwa koncerty\r\n                            razem z zespołem Golec uOrkiestra.\r\n                        </StyledParagraph>\r\n                    </>\r\n                }\r\n            />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default AuthorPage;\r\n","import Section from '../../../common/Section';\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectTaskById } from '../tasksSlice';\r\nimport { StyledParagraph } from '../../../common/StyledParagraph';\r\n\r\nfunction TaskPage() {\r\n\r\n    const { id } = useParams();\r\n    const task = useSelector(state => selectTaskById(state, id));\r\n\r\n    return (\r\n        <Container>\r\n            <Header title=\"Szczegóły zadania\" />\r\n            <Section\r\n                title={task ? task.content : \"Nie znaleziono zadania\"}\r\n                body={\r\n                    task ?\r\n                        <StyledParagraph>\r\n                            <strong>Ukończono:</strong> {task.done ? \"Tak 😁\" : \"Nie 😪\"}\r\n                        </StyledParagraph> :\r\n                        <StyledParagraph>\r\n                            🤔\r\n                        </StyledParagraph>\r\n                }\r\n            />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default TaskPage;\r\n","import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n    color: white;\r\n    text-decoration: none;\r\n    padding: 5px 20px;\r\n\r\n&:hover{\r\n    border-width: 2px 0;\r\n    border-style: solid;\r\n    border-color: #fff;\r\n};\r\n\r\n&.${activeClassName}{\r\n    font-weight: bold;\r\n};\r\n\r\n`;\r\n\r\nexport const StyledNavigation = styled.nav`\r\n    display: flex;\r\n    list-style: none;\r\n    background-color: teal;\r\n    padding: 20px;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;","export const theme = {\r\n    breakpoint: 767,\r\n    buttonMainColor: \"teal\",\r\n};","import TasksPage from \"./features/tasks/TasksPage/index\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport TaskPage from \"./features/tasks/TaskPage/index\";\r\nimport { StyledNavLink, StyledNavigation } from \"./styled\";\r\nimport { Switch, Route, HashRouter, Redirect } from 'react-router-dom';\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { theme } from \"./theme\";\r\n\r\nexport const App = () => (\r\n    <ThemeProvider theme={theme}>\r\n        <HashRouter>\r\n            <nav>\r\n                <StyledNavigation>\r\n                    <li>\r\n                        <StyledNavLink to=\"/zadania\">Zadania</StyledNavLink>\r\n                    </li>\r\n                    <li>\r\n                        <StyledNavLink to=\"/autor\">O autorze</StyledNavLink>\r\n                    </li>\r\n                </StyledNavigation>\r\n            </nav>\r\n            <Switch>\r\n                <Route path=\"/zadania/:id\">\r\n                    <TaskPage />\r\n                </Route>\r\n                <Route path=\"/zadania\">\r\n                    <TasksPage />\r\n                </Route>\r\n                <Route path=\"/autor\">\r\n                    <AuthorPage />\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <Redirect to=\"/zadania\" />\r\n                </Route>\r\n            </Switch>\r\n        </HashRouter>\r\n    </ThemeProvider>\r\n);","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todo-list-redux/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { call, put, delay, takeLatest, takeEvery, select } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { fetchExampleTasks, selectTasks, fetchExampleTasksSuccess } from \"./tasksSlice\";\r\nimport { saveTasksInLocalStorage } from \"../tasks/tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(fetchExampleTasksSuccess(exampleTasks));\r\n    } catch (error) {\r\n        yield call(alert, \"Coś poszło nie tak!\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n};","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport { App } from \"./App\";\nimport store from \"./store\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}